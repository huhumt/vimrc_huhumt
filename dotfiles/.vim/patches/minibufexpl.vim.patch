diff --git a/plugin/minibufexpl.vim b/plugin/minibufexpl.vim
index e2b3348..0f1aa36 100644
--- a/plugin/minibufexpl.vim
+++ b/plugin/minibufexpl.vim
@@ -91,13 +91,16 @@ if !exists(':MBEbb')
   command! MBEbb call <SID>CycleBuffer(0,1)
 endif
 if !exists(':MBEbd')
-  command! -bang -nargs=* MBEbd call <SID>DeleteBuffer(0,'<bang>'=='!',<f-args>)
+  command! -bang -nargs=* MBEbd call <SID>DeleteBuffer(0,'<bang>'=='!',0,<f-args>)
+endif
+if !exists(':MBEbda')
+  command! -bang -nargs=* MBEbd call <SID>DeleteBuffer(0,'<bang>'=='!',1,<f-args>)
 endif
 if !exists(':MBEbw')
-  command! -bang -nargs=* MBEbw call <SID>DeleteBuffer(1,'<bang>'=='!',<f-args>)
+  command! -bang -nargs=* MBEbw call <SID>DeleteBuffer(1,'<bang>'=='!',0,<f-args>)
 endif
 if !exists(':MBEbun')
-  command! -bang -nargs=* MBEbun call <SID>DeleteBuffer(2,'<bang>'=='!',<f-args>)
+  command! -bang -nargs=* MBEbun call <SID>DeleteBuffer(2,'<bang>'=='!',0,<f-args>)
 endif
 
 " }}}
@@ -285,7 +288,7 @@ endif
 " Status Line Text for MBE window {{{
 "
 if !exists('g:miniBufExplStatusLineText')
-  let g:miniBufExplStatusLineText = "-MiniBufExplorer-"
+  let g:miniBufExplStatusLineText = "%4*\-MiniBufExplorer-"
 endif
 
 " }}}
@@ -391,9 +394,9 @@ augroup MiniBufExpl
   autocmd!
   autocmd VimEnter       * nested call <SID>VimEnterHandler()
   autocmd TabEnter       * nested call <SID>TabEnterHandler()
-  autocmd BufAdd         *        call <SID>BufAddHandler()
-  autocmd BufEnter       * nested call <SID>BufEnterHandler()
-  autocmd BufDelete      *        call <SID>BufDeleteHandler()
+  autocmd BufAdd         *        silent! call <SID>BufAddHandler()
+  autocmd BufEnter       * nested silent! call <SID>BufEnterHandler()
+  autocmd BufDelete      *        silent! call <SID>BufDeleteHandler()
   autocmd CursorHold,CursorHoldI,BufWritePost    *
     \ call <SID>DEBUG('Entering UpdateBufferStateDict AutoCmd', 10) |
     \ call <SID>UpdateBufferStateDict(bufnr("%"),0) |
@@ -669,7 +672,10 @@ function! <SID>StartExplorer(curBufNum)
   nnoremap <buffer> v       :call <SID>MBESelectBuffer(2)<CR>:<BS>
   " If you press d in the -MiniBufExplorer- then try to
   " delete the selected buffer.
-  nnoremap <buffer> d       :call <SID>MBEDeleteBuffer()<CR>:<BS>
+  nnoremap <buffer> d       :call <SID>MBEDeleteBuffer(0)<CR>:<BS>
+  " If you press D in the -MiniBufExplorer- then try to
+  " delete the all buffers after selected buffer.
+  nnoremap <buffer> D       :call <SID>MBEDeleteBuffer(1)<CR>:<BS>
   " The following allow us to use regular movement keys to
   " scroll in a wrapped single line buffer
   nnoremap <buffer> k       gk
@@ -875,6 +881,10 @@ function! <SID>UpdateExplorer(curBufNum)
     " Switch into MBE allowing autocmd to run will
     " make the syntax highlight in MBE window working
     call s:SwitchWindow('w',0,l:winNum)
+
+    let l:buf_path = expand('#'.a:curBufNum.':~:.')
+    let l:sts = g:miniBufExplStatusLineText . '\ %3*\ ' . l:buf_path . '\ %4*'
+    exec 'setlocal statusline='.l:sts
   endif
 
   call <SID>DisplayBuffers(a:curBufNum)
@@ -1350,9 +1360,10 @@ endfunction
 "   delete/wipeout/unload a buffer
 " a:bufNum
 "   number of the buffer to be deleted
+" a:bufMode 0 only current buffer, 1 all buffer after current
 "
-function! <SID>DeleteBuffer(action,bang,...)
-  call <SID>DEBUG('Entering DeleteBuffer('.a:action.','.a:bang.')',10)
+function! <SID>DeleteBuffer(action, bang, bufMode, ...)
+  call <SID>DEBUG('Entering DeleteBuffer('.a:action.','.a:bang.','.a:bufMode.')',10)
 
   if a:0 == 0
     call <SID>DEBUG('No buffer is given, use current buffer',5)
@@ -1362,7 +1373,23 @@ function! <SID>DeleteBuffer(action,bang,...)
     let l:bufNums = map(copy(a:000),'v:val =~ ''\d\+'' ? bufnr(v:val + 0) : bufnr(v:val)')
   endif
 
+  if len(l:bufNums) == 1 && a:bufMode > 0
+    let l:curBufIndex = max([3, index(s:BufList, l:bufNums[0])])
+    let l:bufNums = s:BufList[l:curBufIndex:]
+  endif
+
   call <SID>DEBUG('Buffers to be deleted are '.string(l:bufNums),5)
+  if a:action == 2
+    let l:cmd = 'silent! bun'
+  elseif a:action == 1
+    let l:cmd = 'silent! bw'
+  else
+    let l:cmd = 'silent! bd'
+  endif
+
+  if a:bang
+    let l:cmd = l:cmd.'!'
+  endif
 
   for l:bufNum in l:bufNums
     if <SID>IsBufferIgnored(l:bufNum)
@@ -1399,21 +1426,8 @@ function! <SID>DeleteBuffer(action,bang,...)
     " Delete the buffer selected.
     call <SID>DEBUG('About to delete buffer: '.l:bufNum,5)
 
-    if a:action == 2
-      let l:cmd = 'bun'
-    elseif a:action == 1
-      let l:cmd = 'bw'
-    else
-      let l:cmd = 'bd'
-    endif
-
-    if a:bang
-      let l:cmd = l:cmd.'!'
-    endif
-
-    let l:cmd = 'silent! '.l:cmd.' '.l:bufNum
+    let l:cmd = l:cmd.' '.l:bufNum
     call <SID>DEBUG('About to execute the command "'.l:cmd.'"',5)
-
     exec l:cmd
 
     let t:miniBufExplAutoUpdate = l:saveAutoUpdate
@@ -2247,7 +2261,8 @@ endfunction
 " window, this routine will attempt to get different buffers into the
 " windows that will be affected so that windows don't get removed.
 "
-function! <SID>MBEDeleteBuffer()
+" select_buf: 0 only selected, 1 delete all buffers after selected
+function! <SID>MBEDeleteBuffer(select_buf)
   call <SID>DEBUG('Entering MBEDeleteBuffer()',10)
 
   " Make sure we are in our window
@@ -2260,7 +2275,7 @@ function! <SID>MBEDeleteBuffer()
   let l:selBuf = <SID>GetSelectedBuffer()
 
   if l:selBuf != -1
-    call <SID>DeleteBuffer(0,0,l:selBuf)
+    call <SID>DeleteBuffer(0,0,a:select_buf,l:selBuf)
   endif
 
   call <SID>DEBUG('Leaving MBEDeleteBuffer()',10)
