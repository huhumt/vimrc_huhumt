diff --git a/plugin/minibufexpl.vim b/plugin/minibufexpl.vim
index e2b3348..a3c49b7 100644
--- a/plugin/minibufexpl.vim
+++ b/plugin/minibufexpl.vim
@@ -91,13 +91,16 @@ if !exists(':MBEbb')
   command! MBEbb call <SID>CycleBuffer(0,1)
 endif
 if !exists(':MBEbd')
-  command! -bang -nargs=* MBEbd call <SID>DeleteBuffer(0,'<bang>'=='!',<f-args>)
+  command! -bang -nargs=* MBEbd call <SID>DeleteBuffer(0,'<bang>'=='!',0,<f-args>)
+endif
+if !exists(':MBEbda')
+  command! -bang -nargs=* MBEbd call <SID>DeleteBuffer(0,'<bang>'=='!',1,<f-args>)
 endif
 if !exists(':MBEbw')
-  command! -bang -nargs=* MBEbw call <SID>DeleteBuffer(1,'<bang>'=='!',<f-args>)
+  command! -bang -nargs=* MBEbw call <SID>DeleteBuffer(1,'<bang>'=='!',0,<f-args>)
 endif
 if !exists(':MBEbun')
-  command! -bang -nargs=* MBEbun call <SID>DeleteBuffer(2,'<bang>'=='!',<f-args>)
+  command! -bang -nargs=* MBEbun call <SID>DeleteBuffer(2,'<bang>'=='!',0,<f-args>)
 endif
 
 " }}}
@@ -285,7 +288,7 @@ endif
 " Status Line Text for MBE window {{{
 "
 if !exists('g:miniBufExplStatusLineText')
-  let g:miniBufExplStatusLineText = "-MiniBufExplorer-"
+  let g:miniBufExplStatusLineText = "%4*\-MiniBufExplorer-"
 endif
 
 " }}}
@@ -391,9 +394,9 @@ augroup MiniBufExpl
   autocmd!
   autocmd VimEnter       * nested call <SID>VimEnterHandler()
   autocmd TabEnter       * nested call <SID>TabEnterHandler()
-  autocmd BufAdd         *        call <SID>BufAddHandler()
-  autocmd BufEnter       * nested call <SID>BufEnterHandler()
-  autocmd BufDelete      *        call <SID>BufDeleteHandler()
+  autocmd BufAdd         *        silent! call <SID>BufAddHandler()
+  autocmd BufEnter       * nested silent! call <SID>BufEnterHandler()
+  autocmd BufDelete      *        silent! call <SID>BufDeleteHandler()
   autocmd CursorHold,CursorHoldI,BufWritePost    *
     \ call <SID>DEBUG('Entering UpdateBufferStateDict AutoCmd', 10) |
     \ call <SID>UpdateBufferStateDict(bufnr("%"),0) |
@@ -434,7 +437,14 @@ function! <SID>VimEnterHandler()
 
   if g:miniBufExplAutoStart && t:miniBufExplAutoUpdate == 1
         \ && (t:skipEligibleBuffersCheck == 1 || <SID>HasEligibleBuffers() == 1)
-    call <SID>StartExplorer(bufnr("%"))
+
+    " VimEnter event will be triggered after a session is loaded, if there is
+    " already a MBE window, we need to update it at this point.
+    if <SID>FindWindow('-MiniBufExplorer-', 1) == -1
+      call <SID>StartExplorer(bufnr("%"))
+    else
+      call <SID>UpdateExplorer(bufnr("%"))
+    endif
 
     " Let the MBE open in the new tab
     let s:TabsMBEState = 1
@@ -669,7 +679,10 @@ function! <SID>StartExplorer(curBufNum)
   nnoremap <buffer> v       :call <SID>MBESelectBuffer(2)<CR>:<BS>
   " If you press d in the -MiniBufExplorer- then try to
   " delete the selected buffer.
-  nnoremap <buffer> d       :call <SID>MBEDeleteBuffer()<CR>:<BS>
+  nnoremap <buffer> d       :call <SID>MBEDeleteBuffer(0)<CR>:<BS>
+  " If you press D in the -MiniBufExplorer- then try to
+  " delete the all buffers after selected buffer.
+  nnoremap <buffer> D       :call <SID>MBEDeleteBuffer(1)<CR>:<BS>
   " The following allow us to use regular movement keys to
   " scroll in a wrapped single line buffer
   nnoremap <buffer> k       gk
@@ -716,6 +729,7 @@ function! <SID>StartExplorer(curBufNum)
   call <SID>BuildBufferList(a:curBufNum)
 
   call <SID>DisplayBuffers(a:curBufNum)
+  call <SID>ResizeWindow()
 
   " Switch away from MBE allowing autocmd to run which will
   " trigger PowerLine's BufLeave event handler
@@ -875,6 +889,10 @@ function! <SID>UpdateExplorer(curBufNum)
     " Switch into MBE allowing autocmd to run will
     " make the syntax highlight in MBE window working
     call s:SwitchWindow('w',0,l:winNum)
+
+    let l:buf_path = expand('#'.a:curBufNum.':~:.')
+    let l:sts = g:miniBufExplStatusLineText . '\ %3*\ ' . l:buf_path . '\ %4*'
+    exec 'setlocal statusline='.l:sts
   endif
 
   call <SID>DisplayBuffers(a:curBufNum)
@@ -1090,7 +1108,7 @@ function! <SID>DisplayBuffers(curBufNum)
   endif
 
   call <SID>ShowBuffers()
-  call <SID>ResizeWindow()
+  " call <SID>ResizeWindow()
 
   " Place cursor at current buffer in MBE
   if !<SID>IsBufferIgnored(a:curBufNum)
@@ -1350,9 +1368,10 @@ endfunction
 "   delete/wipeout/unload a buffer
 " a:bufNum
 "   number of the buffer to be deleted
+" a:bufMode 0 only current buffer, 1 all buffer after current
 "
-function! <SID>DeleteBuffer(action,bang,...)
-  call <SID>DEBUG('Entering DeleteBuffer('.a:action.','.a:bang.')',10)
+function! <SID>DeleteBuffer(action, bang, bufMode, ...)
+  call <SID>DEBUG('Entering DeleteBuffer('.a:action.','.a:bang.','.a:bufMode.')',10)
 
   if a:0 == 0
     call <SID>DEBUG('No buffer is given, use current buffer',5)
@@ -1362,7 +1381,23 @@ function! <SID>DeleteBuffer(action,bang,...)
     let l:bufNums = map(copy(a:000),'v:val =~ ''\d\+'' ? bufnr(v:val + 0) : bufnr(v:val)')
   endif
 
+  if len(l:bufNums) == 1 && a:bufMode > 0
+    let l:curBufIndex = max([3, index(s:BufList, l:bufNums[0])])
+    let l:bufNums = s:BufList[l:curBufIndex:]
+  endif
+
   call <SID>DEBUG('Buffers to be deleted are '.string(l:bufNums),5)
+  if a:action == 2
+    let l:cmd = 'silent! bun'
+  elseif a:action == 1
+    let l:cmd = 'silent! bw'
+  else
+    let l:cmd = 'silent! bd'
+  endif
+
+  if a:bang
+    let l:cmd = l:cmd.'!'
+  endif
 
   for l:bufNum in l:bufNums
     if <SID>IsBufferIgnored(l:bufNum)
@@ -1399,21 +1434,8 @@ function! <SID>DeleteBuffer(action,bang,...)
     " Delete the buffer selected.
     call <SID>DEBUG('About to delete buffer: '.l:bufNum,5)
 
-    if a:action == 2
-      let l:cmd = 'bun'
-    elseif a:action == 1
-      let l:cmd = 'bw'
-    else
-      let l:cmd = 'bd'
-    endif
-
-    if a:bang
-      let l:cmd = l:cmd.'!'
-    endif
-
-    let l:cmd = 'silent! '.l:cmd.' '.l:bufNum
+    let l:cmd = l:cmd.' '.l:bufNum
     call <SID>DEBUG('About to execute the command "'.l:cmd.'"',5)
-
     exec l:cmd
 
     let t:miniBufExplAutoUpdate = l:saveAutoUpdate
@@ -1542,10 +1564,13 @@ function! <SID>BuildBufferList(curBufNum)
         call add(l:tabList, l:tab)
     endfor
 
-    if t:miniBufExplSortBy == "name"
-        call sort(l:tabList, "<SID>NameCmp")
-    elseif t:miniBufExplSortBy == "mru"
+    if t:miniBufExplSortBy == "mru"
         call sort(l:tabList, "<SID>MRUCmp")
+    elseif t:miniBufExplSortBy == "name"
+        call sort(l:tabList, "<SID>NameCmp")
+    else
+        " Sort by buffer number by default
+        call sort(l:tabList, "<SID>NumberCmp")
     endif
 
     let l:miniBufExplBufList = ''
@@ -1976,6 +2001,15 @@ function! <SID>UpdateBufferStateDict(bufNum,deleted)
     call <SID>DEBUG('Leaving UpdateBufferStateDict()',10)
 endfunction
 
+" }}}
+" MRUCmp - compares tabs based on MRU order {{{
+"
+function! <SID>MRUCmp(tab1, tab2)
+  let l:buf1 = <SID>GetBufferNumber(a:tab1)
+  let l:buf2 = <SID>GetBufferNumber(a:tab2)
+  return index(s:MRUList, l:buf1) - index(s:MRUList, l:buf2)
+endfunction
+
 " }}}
 " NameCmp - compares tabs based on filename {{{
 "
@@ -1992,12 +2026,12 @@ function! <SID>NameCmp(tab1, tab2)
 endfunction
 
 " }}}
-" MRUCmp - compares tabs based on MRU order {{{
+" NumberCmp - compares tabs based on buffer number {{{
 "
-function! <SID>MRUCmp(tab1, tab2)
-  let l:buf1 = str2nr(matchstr(a:tab1, '[0-9]\+'))
-  let l:buf2 = str2nr(matchstr(a:tab2, '[0-9]\+'))
-  return index(s:MRUList, l:buf1) - index(s:MRUList, l:buf2)
+function! <SID>NumberCmp(tab1, tab2)
+  let l:buf1 = <SID>GetBufferNumber(a:tab1)
+  let l:buf2 = <SID>GetBufferNumber(a:tab2)
+  return l:buf1 - l:buf2
 endfunction
 
 " }}}
@@ -2124,12 +2158,34 @@ function! <SID>QuitIfLastOpen() abort
   endif
 endfunction
 
+" }}}
+" GetBufferNumber - Get the buffer number from a formated string {{{
+"
+function! <SID>GetBufferNumber(bufname)
+  call <SID>DEBUG('Entering GetBufferNumber()',10)
+  call <SID>DEBUG('The buffer name is '.a:bufname,9)
+  if !g:miniBufExplShowBufNumbers
+    " This is a bit ugly, but it works, unless we come up with a
+    " better way to get the key for a dictionary by its value.
+    let l:bufUniqNameDictKeys = keys(s:bufUniqNameDict)
+    let l:bufUniqNameDictValues = values(s:bufUniqNameDict)
+    let l:retv = l:bufUniqNameDictKeys[match(l:bufUniqNameDictValues,substitute(a:bufname,'\[*\([^\]]*\)\]*.*', '\1', ''))]
+  else
+    let l:retv = substitute(a:bufname,'\[*\([0-9]*\):[^\]]*\]*.*', '\1', '') + 0
+  endif
+  call <SID>DEBUG('The buffer number is '.l:retv,9)
+  call <SID>DEBUG('Leaving GetBufferNumber()',10)
+  return str2nr(l:retv)
+endfunction
+
 " }}}
 " GetActiveBuffer {{{
 "
 function! <SID>GetActiveBuffer()
   call <SID>DEBUG('Entering GetActiveBuffer()',10)
-  let l:bufNum = substitute(s:miniBufExplBufList,'\[\([0-9]*\):[^\]]*\][^\!]*!', '\1', '') + 0
+  let l:bufStr = substitute(s:miniBufExplBufList,'.*\(\[[0-9]*:*[^\]]*\][^\!]*!\).*', '\1', '')
+  call <SID>DEBUG('Currently active buffer is '.l:bufStr,10)
+  let l:bufNum = <SID>GetBufferNumber(l:bufStr)
   call <SID>DEBUG('Currently active buffer is '.l:bufNum,10)
   call <SID>DEBUG('Leaving GetActiveBuffer()',10)
   return l:bufNum
@@ -2160,26 +2216,17 @@ function! <SID>GetSelectedBuffer()
   let @" = ""
   normal ""yi[
   if @" != ""
-    if !g:miniBufExplShowBufNumbers
-      " This is a bit ugly, but it works, unless we come up with a
-      " better way to get the key for a dictionary by its value.
-      let l:bufUniqNameDictKeys = keys(s:bufUniqNameDict)
-      let l:bufUniqNameDictValues = values(s:bufUniqNameDict)
-      let l:retv = l:bufUniqNameDictKeys[match(l:bufUniqNameDictValues,substitute(@",'[0-9]*:\(.*\)', '\1', ''))]
-    else
-      let l:retv = substitute(@",'\([0-9]*\):.*', '\1', '') + 0
-    endif
-    let @" = l:save_reg
-    call <SID>DEBUG('Leaving GetSelectedBuffer()',10)
-    return l:retv
+    let l:retv = <SID>GetBufferNumber(@")
   else
-    let @" = l:save_reg
-    call <SID>DEBUG('Leaving GetSelectedBuffer()',10)
-    return -1
+    let l:retv = -1
   endif
+  let @" = l:save_reg
 
   let &report  = l:save_rep
   let &showcmd = l:save_sc
+
+  call <SID>DEBUG('Leaving GetSelectedBuffer()',10)
+  return l:retv
 endfunction
 
 " }}}
@@ -2247,7 +2294,8 @@ endfunction
 " window, this routine will attempt to get different buffers into the
 " windows that will be affected so that windows don't get removed.
 "
-function! <SID>MBEDeleteBuffer()
+" select_buf: 0 only selected, 1 delete all buffers after selected
+function! <SID>MBEDeleteBuffer(select_buf)
   call <SID>DEBUG('Entering MBEDeleteBuffer()',10)
 
   " Make sure we are in our window
@@ -2260,7 +2308,7 @@ function! <SID>MBEDeleteBuffer()
   let l:selBuf = <SID>GetSelectedBuffer()
 
   if l:selBuf != -1
-    call <SID>DeleteBuffer(0,0,l:selBuf)
+    call <SID>DeleteBuffer(0,0,a:select_buf,l:selBuf)
   endif
 
   call <SID>DEBUG('Leaving MBEDeleteBuffer()',10)
