diff --git a/autoload/ctrlsf.vim b/autoload/ctrlsf.vim
index 59aa399..9e63278 100644
--- a/autoload/ctrlsf.vim
+++ b/autoload/ctrlsf.vim
@@ -12,6 +12,7 @@
 " remember what user is searching
 let s:current_mode = ''
 let s:current_query = ''
+let s:preview_popup_winid = -1
 
 " s:ExecSearch()
 "
@@ -254,6 +255,12 @@ func! ctrlsf#Quit() abort
     endif
 
     call s:Quit()
+
+    if s:JumpPreviewPopupWindow() > 0
+        close
+    endif
+
+    let s:preview_popup_winid = -1
 endf
 
 " OpenLocList()
@@ -332,6 +339,8 @@ func! ctrlsf#JumpTo(mode, ...) abort
         call s:OpenFileInWindow(file, lnum, col, 1, 0)
     elseif a:mode ==# 'open_background'
         call s:OpenFileInWindow(file, lnum, col, 2, 0)
+    elseif a:mode ==# 'open_vsplit'
+        call s:OpenFileInWindow(file, lnum, col, 2, 2)
     elseif a:mode ==# 'split'
         call s:OpenFileInWindow(file, lnum, col, 1, 1)
     elseif a:mode ==# 'vsplit'
@@ -366,13 +375,12 @@ func! ctrlsf#NextMatch(forward, ...) abort
             call ctrlsf#log#Notice("search hit TOP, continuing at BOTTOM")
         else
             call ctrlsf#log#Clear()
+            call cursor(vlnum, vcol)
+            normal! zv
         endif
 
-        call cursor(vlnum, vcol)
-        normal! zv
-
         if g:ctrlsf_auto_preview
-            call ctrlsf#JumpTo('preview')
+            call ctrlsf#JumpTo('open_vsplit')
         endif
     endif
 endf
@@ -417,39 +425,48 @@ endf
 " '2' means split vertically
 "
 func! s:OpenFileInWindow(file, lnum, col, mode, split) abort
-    if a:mode == 1
-        " close preview window if file is opened in current tab
-        call ctrlsf#preview#ClosePreviewWindow()
-
-        if ctrlsf#opt#AutoClose()
-            call s:Quit()
+    " let target_winnr = ctrlsf#win#FindTargetWindow(a:file)
+    " if (target_winnr == 0 || (target_winnr < 3 && target_winnr >= winnr('$') - 1)) && (a:split || (&modified && !&hidden))
+    let opened_win_len = len(filter(range(1, winnr('$')), 'empty(getwinvar(v:val, "&buftype"))'))
+    call ctrlsf#win#FocusCallerWindow()
+    if opened_win_len < 2 && (a:split || (&modified && !&hidden))
+        if a:split == 2
+            exec 'silent leftabove vertical split ' . fnameescape(a:file)
+        else
+            exec 'silent split ' . fnameescape(a:file)
         endif
-    endif
-
-    let target_winnr = ctrlsf#win#FindTargetWindow(a:file)
-    if target_winnr == 0
-        exec 'silent split ' . fnameescape(a:file)
     else
-        exec target_winnr . 'wincmd w'
+        call s:JumpPreviewPopupWindow()
 
         if bufname('%') !=# a:file
-            if a:split || (&modified && !&hidden)
-                if a:split == 2
-                    exec 'silent vertical split ' . fnameescape(a:file)
-                else
-                    exec 'silent split ' . fnameescape(a:file)
-                endif
-            else
-                exec 'silent edit ' . fnameescape(a:file)
-            endif
+            exec 'silent edit ' . fnameescape(a:file)
         endif
     endif
 
+    if s:preview_popup_winid < 0
+        let s:preview_popup_winid = win_getid(winnr())
+    endif
+
     call ctrlsf#win#MoveCursorCentral(a:lnum, a:col)
 
     if g:ctrlsf_selected_line_hl =~ 'o'
         call ctrlsf#hl#HighlightSelectedLine()
     endif
+
+    if a:mode == 1
+        if ctrlsf#opt#AutoClose()
+            call s:Quit()
+        else
+            " close preview window if file is opened in current tab
+            call ctrlsf#preview#ClosePreviewWindow()
+        endif
+
+        call s:JumpPreviewPopupWindow()
+        call ctrlsf#ClearSelectedLine()
+        let s:preview_popup_winid = -1
+    else
+        call ctrlsf#win#FocusMainWindow()
+    endif
 endf
 
 " OpenFileInTab()
@@ -521,6 +538,10 @@ func! s:OpenAndDraw() abort
     call ctrlsf#win#FocusFirstMatch()
 endf
 
+func! s:JumpPreviewPopupWindow() abort
+    return ctrlsf#win#FocusWindow(win_id2win(s:preview_popup_winid))
+endf
+
 " s:Quit()
 "
 func! s:Quit() abort
diff --git a/autoload/ctrlsf/pat.vim b/autoload/ctrlsf/pat.vim
index 7554a94..cc0616a 100644
--- a/autoload/ctrlsf/pat.vim
+++ b/autoload/ctrlsf/pat.vim
@@ -97,9 +97,9 @@ func! ctrlsf#pat#HighlightRegex(vmode) abort
         endif
     else
         if magic ==# '\v'
-            let sign = '(\|\d+ col \d+\|.*)@<='
+            let sign = '(\|[ 0-9]+col[ 0-9]+\|.*)@<='
         else
-            let sign = '\(|\d\+ col \d\+|\.\*\)\@<='
+            let sign = '\(|\[ 0-9]\+col\[ 0-9]\+|\.\*\)\@<='
         endif
     endif
 
@@ -128,9 +128,9 @@ func! ctrlsf#pat#MatchPerLineRegex(vmode) abort
         endif
     else
         if magic ==# '\v'
-            let sign = '\|\d+ col \d+\|.{-}\zs'
+            let sign = '\|[ 0-9]+col[ 0-9]+\|.{-}\zs'
         else
-            let sign = '|\d\+ col \d\+|\.\{-}\zs'
+            let sign = '|\[ 0-9]\+col\[ 0-9]\+|\.\{-}\zs'
         endif
     endif
 
diff --git a/autoload/ctrlsf/view.vim b/autoload/ctrlsf/view.vim
index 22271e6..5109d26 100644
--- a/autoload/ctrlsf/view.vim
+++ b/autoload/ctrlsf/view.vim
@@ -36,16 +36,7 @@ endf
 func! s:Line(line) abort
     let out = a:line.lnum . (a:line.matched() ? ':' : '-')
     let out .= repeat(' ', ctrlsf#view#Indent() - len(out))
-    let out .= a:line.content
-    return [out]
-endf
-
-func! s:LineCompact(match) abort
-    let out = printf("%s|%s col %s| %s",
-                \ a:match.filename,
-                \ a:match.lnum,
-                \ a:match.col,
-                \ a:match.text)
+    let out .= trim(a:line.content)
     return [out]
 endf
 
@@ -154,23 +145,26 @@ endf
 func! s:CompactViewIncr(base_vlnum) abort
     let matchlist = ctrlsf#db#MatchList()
     let to_render = matchlist[s:rendered_match:-1]
-
+    let mat_cnt = s:rendered_match
+    let s:rendered_match = s:rendered_match + len(to_render)
     let view = []
 
     for mat in to_render
-        call extend(view, s:LineCompact(mat))
+        let mat_cnt += 1
+        let f_list = split(mat.filename, '/')
+        let f_basename = join(len(f_list) > 1 ? f_list[-2:]: f_list, '/')
+        let indent = printf("[%*d] %-*s |%-*s col %*s| ",
+                    \ 4, mat_cnt,
+                    \ 48, f_basename,
+                    \ 4, mat.lnum,
+                    \ 4, mat.col)
+        call extend(view, [indent . trim(mat.text)])
 
         let vlnum = a:base_vlnum + len(view)
-        let indent = printf("%s|%s col %s| ",
-                    \ mat.filename,
-                    \ mat.lnum,
-                    \ mat.col)
         let vcol = mat.col + len(indent)
         call mat.set_vpos(vlnum, vcol, 'compact')
     endfo
 
-    let s:rendered_match = s:rendered_match + len(to_render)
-
     return view
 endf
 
@@ -278,16 +272,27 @@ endf
 "
 func! ctrlsf#view#FindNextMatch(forward, wrapscan, ...) abort
     let file_based = get(a:, 1, 0)
+    let l:fixed_vcol = 8
+    let l:manual_cursor_moved = v:false
 
     if file_based
         let vlnum = s:FindNextFile(a:forward)
         call cursor(vlnum, 1)
+    else
+        if a:forward && col('.') == l:fixed_vcol
+            call cursor(0, col('$'))
+            let l:manual_cursor_moved = v:true
+        endif
     endif
 
     let regex = ctrlsf#pat#MatchPerLineRegex(ctrlsf#CurrentMode())
     let flag  = (a:forward || file_based) ? 'n' : 'nb'
     let flag .= a:wrapscan ? 'w' : 'W'
-    return searchpos(regex, flag)
+    let [vlnum, vcol] = searchpos(regex, flag)
+    if l:manual_cursor_moved && vlnum == 1
+        call cursor(0, l:fixed_vcol)
+    endif
+    return [vlnum, file_based ? vcol : l:fixed_vcol]
 endf
 
 func! s:FindNextFile(forward) abort
diff --git a/autoload/ctrlsf/win.vim b/autoload/ctrlsf/win.vim
index 1bfd140..1eefb46 100644
--- a/autoload/ctrlsf/win.vim
+++ b/autoload/ctrlsf/win.vim
@@ -91,10 +91,14 @@ func! ctrlsf#win#OpenMainWindow() abort
               \ }[g:ctrlsf_compact_position]
     endif
 
-
     " open window
     exec 'silent keepalt ' . openpos . winsize . 'split ' .
-                \ (bufnr('__CtrlSF__') != -1 ? '+b'.bufnr('__CtrlSF__') : '__CtrlSF__')
+                \ (bufnr(s:MAIN_BUF_NAME) != -1 ? '+b'.bufnr(s:MAIN_BUF_NAME) : s:MAIN_BUF_NAME)
+
+    let delta_height = winheight(0) - winsize
+    if delta_height > 0
+        exec 'silent resize -' . delta_height
+    endif
 
     call s:InitMainWindow()
 
@@ -285,7 +289,7 @@ func! ctrlsf#win#FocusWindow(exp) abort
         let winnr = ctrlsf#win#FindWindow(a:exp)
     endif
 
-    if winnr < 0
+    if winnr <= 0
         return -1
     endif
 
@@ -311,6 +315,10 @@ func! ctrlsf#win#FindCallerWindow() abort
     return s:caller_win.winid > 0 ? win_id2win(s:caller_win.winid) : -1
 endf
 
+func! ctrlsf#win#FindCallerBuf() abort
+    return s:caller_win.bufnr
+endf
+
 " FocusCallerWindow()
 "
 func! ctrlsf#win#FocusCallerWindow() abort
@@ -367,6 +375,7 @@ func! ctrlsf#win#FocusFirstMatch() abort
     " scroll up to top line
     1normal! ^
     call ctrlsf#NextMatch(1, 0)
+    call ctrlsf#win#FocusMainWindow()
 endf
 
 """""""""""""""""""""""""""""""""
diff --git a/plugin/ctrlsf.vim b/plugin/ctrlsf.vim
index 19fb9a2..aa0aab4 100644
--- a/plugin/ctrlsf.vim
+++ b/plugin/ctrlsf.vim
@@ -99,7 +99,7 @@ endif
 if !exists('g:ctrlsf_auto_close')
     let g:ctrlsf_auto_close = {
         \ "normal" : 1,
-        \ "compact": 0
+        \ "compact": 1
         \ }
 endif
 " }}}
