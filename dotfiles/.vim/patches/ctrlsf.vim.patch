diff --git a/autoload/ctrlsf.vim b/autoload/ctrlsf.vim
index 59aa399..9da6a39 100644
--- a/autoload/ctrlsf.vim
+++ b/autoload/ctrlsf.vim
@@ -366,11 +366,10 @@ func! ctrlsf#NextMatch(forward, ...) abort
             call ctrlsf#log#Notice("search hit TOP, continuing at BOTTOM")
         else
             call ctrlsf#log#Clear()
+            call cursor(vlnum, vcol)
+            normal! zv
         endif
 
-        call cursor(vlnum, vcol)
-        normal! zv
-
         if g:ctrlsf_auto_preview
             call ctrlsf#JumpTo('preview')
         endif
@@ -418,30 +417,25 @@ endf
 "
 func! s:OpenFileInWindow(file, lnum, col, mode, split) abort
     if a:mode == 1
-        " close preview window if file is opened in current tab
-        call ctrlsf#preview#ClosePreviewWindow()
-
         if ctrlsf#opt#AutoClose()
             call s:Quit()
+        else
+            " close preview window if file is opened in current tab
+            call ctrlsf#preview#ClosePreviewWindow()
         endif
     endif
 
-    let target_winnr = ctrlsf#win#FindTargetWindow(a:file)
-    if target_winnr == 0
-        exec 'silent split ' . fnameescape(a:file)
-    else
-        exec target_winnr . 'wincmd w'
-
-        if bufname('%') !=# a:file
-            if a:split || (&modified && !&hidden)
-                if a:split == 2
-                    exec 'silent vertical split ' . fnameescape(a:file)
-                else
-                    exec 'silent split ' . fnameescape(a:file)
-                endif
+    if bufname('%') !=# a:file
+        if a:split || (&modified && !&hidden)
+            if a:split == 2
+                exec 'silent ' . ctrlsf#preview#GetOpenPos() . ' vertical split ' . fnameescape(a:file)
             else
-                exec 'silent edit ' . fnameescape(a:file)
+                exec 'silent split ' . fnameescape(a:file)
             endif
+        else
+            call ctrlsf#preview#FocusPreviewWindow()
+            exec 'silent edit ' . fnameescape(a:file)
+            call ctrlsf#win#UpdateCallerWindow()
         endif
     endif
 
diff --git a/autoload/ctrlsf/pat.vim b/autoload/ctrlsf/pat.vim
index 7554a94..cc0616a 100644
--- a/autoload/ctrlsf/pat.vim
+++ b/autoload/ctrlsf/pat.vim
@@ -97,9 +97,9 @@ func! ctrlsf#pat#HighlightRegex(vmode) abort
         endif
     else
         if magic ==# '\v'
-            let sign = '(\|\d+ col \d+\|.*)@<='
+            let sign = '(\|[ 0-9]+col[ 0-9]+\|.*)@<='
         else
-            let sign = '\(|\d\+ col \d\+|\.\*\)\@<='
+            let sign = '\(|\[ 0-9]\+col\[ 0-9]\+|\.\*\)\@<='
         endif
     endif
 
@@ -128,9 +128,9 @@ func! ctrlsf#pat#MatchPerLineRegex(vmode) abort
         endif
     else
         if magic ==# '\v'
-            let sign = '\|\d+ col \d+\|.{-}\zs'
+            let sign = '\|[ 0-9]+col[ 0-9]+\|.{-}\zs'
         else
-            let sign = '|\d\+ col \d\+|\.\{-}\zs'
+            let sign = '|\[ 0-9]\+col\[ 0-9]\+|\.\{-}\zs'
         endif
     endif
 
diff --git a/autoload/ctrlsf/preview.vim b/autoload/ctrlsf/preview.vim
index 503576f..ac88be3 100644
--- a/autoload/ctrlsf/preview.vim
+++ b/autoload/ctrlsf/preview.vim
@@ -7,6 +7,7 @@
 
 " preview buffer's name
 let s:PREVIEW_BUF_NAME = "__CtrlSFPreview__"
+let s:PREVIEW_OPENPOS = "leftabove"
 
 " OpenPreviewWindow()
 "
@@ -16,58 +17,66 @@ func! ctrlsf#preview#OpenPreviewWindow() abort
         return
     endif
 
-    " backup width/height of other windows
-    " be sure doing this only when *opening new window*
-    call ctrlsf#win#BackupAllWinSize()
-
-    let vmode = ctrlsf#CurrentMode()
-
-    if vmode ==# 'normal'
-        " normal mode
-        if g:ctrlsf_preview_position == 'inside'
-            if g:ctrlsf_position == "left" || g:ctrlsf_position == "right" ||
-             \ g:ctrlsf_position == 'left_local' || g:ctrlsf_position == 'right_local'
-                let winsize = winheight(0) / 2
+    let l:normal_buffer = filter(range(1, winnr('$')), 'empty(getwinvar(v:val, "&buftype"))')
+    call ctrlsf#win#FocusCallerWindow()
+
+    if len(l:normal_buffer) < 2
+        " backup width/height of other windows
+        " be sure doing this only when *opening new window*
+        " call ctrlsf#win#BackupAllWinSize()
+
+        let vmode = ctrlsf#CurrentMode()
+
+        if vmode ==# 'normal'
+            " normal mode
+            if g:ctrlsf_preview_position == 'inside'
+                if g:ctrlsf_position == "left" || g:ctrlsf_position == "right" ||
+                 \ g:ctrlsf_position == 'left_local' || g:ctrlsf_position == 'right_local'
+                    let winsize = winheight(0) / 2
+                else
+                    let winsize = winwidth(0) / 2
+                endif
+
+                let openpos = {
+                        \ 'bottom': 'rightbelow vertical',
+                        \ 'right' : 'rightbelow',
+                        \ 'right_local' : 'rightbelow',
+                        \ 'top'   : 'rightbelow vertical',
+                        \ 'left' : 'rightbelow',
+                        \ 'left_local' : 'rightbelow'}
+                        \[g:ctrlsf_position] . ' '
             else
-                let winsize = winwidth(0) / 2
+                if g:ctrlsf_position == "left" || g:ctrlsf_position == "right" ||
+                 \ g:ctrlsf_position == 'left_local' || g:ctrlsf_position == 'right_local'
+                    let ctrlsf_width  = winwidth(0)
+                    let winsize = min([&columns-ctrlsf_width, ctrlsf_width])
+                else
+                    let ctrlsf_height  = winheight(0)
+                    let winsize = min([&lines-ctrlsf_height, ctrlsf_height])
+                endif
+
+                let openpos = {
+                        \ 'bottom'      : 'leftabove',
+                        \ 'right'       : 'leftabove vertical',
+                        \ 'right_local' : 'leftabove vertical',
+                        \ 'top'         : 'rightbelow',
+                        \ 'left'        : 'rightbelow vertical',
+                        \ 'left_local'  : 'rightbelow vertical'}
+                        \[g:ctrlsf_position] . ' '
             endif
-
-            let openpos = {
-                    \ 'bottom': 'rightbelow vertical',
-                    \ 'right' : 'rightbelow',
-                    \ 'right_local' : 'rightbelow',
-                    \ 'top'   : 'rightbelow vertical',
-                    \ 'left' : 'rightbelow',
-                    \ 'left_local' : 'rightbelow'}
-                    \[g:ctrlsf_position] . ' '
+            let opencmd = openpos . winsize . 'split'
         else
-            if g:ctrlsf_position == "left" || g:ctrlsf_position == "right" ||
-             \ g:ctrlsf_position == 'left_local' || g:ctrlsf_position == 'right_local'
-                let ctrlsf_width  = winwidth(0)
-                let winsize = min([&columns-ctrlsf_width, ctrlsf_width])
-            else
-                let ctrlsf_height  = winheight(0)
-                let winsize = min([&lines-ctrlsf_height, ctrlsf_height])
-            endif
-
-            let openpos = {
-                    \ 'bottom'      : 'leftabove',
-                    \ 'right'       : 'leftabove vertical',
-                    \ 'right_local' : 'leftabove vertical',
-                    \ 'top'         : 'rightbelow',
-                    \ 'left'        : 'rightbelow vertical',
-                    \ 'left_local'  : 'rightbelow vertical'}
-                    \[g:ctrlsf_position] . ' '
+            " compact mode
+            let opencmd = 'leftabove vsplit'
         endif
+
+        " open window
+        exec 'silent keepalt ' . opencmd . s:PREVIEW_BUF_NAME
     else
-        " compact mode
-        let winsize = &lines - winheight(0) - 10
-        let openpos = 'leftabove'
+        let s:PREVIEW_OPENPOS = winnr() < l:normal_buffer[-1] ? 'leftabove' : 'rightbelow'
+        exec 'silent keepalt edit ' . s:PREVIEW_BUF_NAME
     endif
 
-    " open window
-    exec 'silent keepalt ' . openpos . winsize . 'split ' . '__CtrlSFPreview__'
-
     call s:InitPreviewWindow()
 endf
 
@@ -81,7 +90,7 @@ func! ctrlsf#preview#ClosePreviewWindow() abort
     close
 
     " restore width/height of other windows
-    call ctrlsf#win#RestoreAllWinSize()
+    " call ctrlsf#win#RestoreAllWinSize()
 
     call ctrlsf#win#FocusMainWindow()
 endf
@@ -113,6 +122,10 @@ func! ctrlsf#preview#FindPreviewWindow() abort
     return ctrlsf#win#FindWindow(s:PREVIEW_BUF_NAME)
 endf
 
+func! ctrlsf#preview#GetOpenPos() abort
+    return s:PREVIEW_OPENPOS
+endf
+
 " FocusPreviewWindow()
 "
 func! ctrlsf#preview#FocusPreviewWindow() abort
diff --git a/autoload/ctrlsf/view.vim b/autoload/ctrlsf/view.vim
index 22271e6..e912534 100644
--- a/autoload/ctrlsf/view.vim
+++ b/autoload/ctrlsf/view.vim
@@ -36,16 +36,7 @@ endf
 func! s:Line(line) abort
     let out = a:line.lnum . (a:line.matched() ? ':' : '-')
     let out .= repeat(' ', ctrlsf#view#Indent() - len(out))
-    let out .= a:line.content
-    return [out]
-endf
-
-func! s:LineCompact(match) abort
-    let out = printf("%s|%s col %s| %s",
-                \ a:match.filename,
-                \ a:match.lnum,
-                \ a:match.col,
-                \ a:match.text)
+    let out .= trim(a:line.content)
     return [out]
 endf
 
@@ -154,23 +145,23 @@ endf
 func! s:CompactViewIncr(base_vlnum) abort
     let matchlist = ctrlsf#db#MatchList()
     let to_render = matchlist[s:rendered_match:-1]
-
+    let mat_cnt = s:rendered_match
+    let s:rendered_match = s:rendered_match + len(to_render)
     let view = []
 
     for mat in to_render
-        call extend(view, s:LineCompact(mat))
+        let mat_cnt += 1
+        let indent = printf("%*s %s |%*s| ",
+                    \ 8,  "No." . mat_cnt,
+                    \ mat.filename,
+                    \ 10, mat.lnum . " col " . mat.col)
+        call extend(view, [indent . trim(mat.text)])
 
         let vlnum = a:base_vlnum + len(view)
-        let indent = printf("%s|%s col %s| ",
-                    \ mat.filename,
-                    \ mat.lnum,
-                    \ mat.col)
         let vcol = mat.col + len(indent)
         call mat.set_vpos(vlnum, vcol, 'compact')
     endfo
 
-    let s:rendered_match = s:rendered_match + len(to_render)
-
     return view
 endf
 
@@ -278,16 +269,28 @@ endf
 "
 func! ctrlsf#view#FindNextMatch(forward, wrapscan, ...) abort
     let file_based = get(a:, 1, 0)
+    let l:fixed_vcol = 8
+    let l:manual_cursor_moved = v:false
 
     if file_based
         let vlnum = s:FindNextFile(a:forward)
         call cursor(vlnum, 1)
+    else
+        let l:cur_col = col('.')
+        if a:forward && l:cur_col >= l:fixed_vcol && l:cur_col < l:fixed_vcol * 6
+            call cursor(0, col('$'))
+            let l:manual_cursor_moved = v:true
+        endif
     endif
 
     let regex = ctrlsf#pat#MatchPerLineRegex(ctrlsf#CurrentMode())
     let flag  = (a:forward || file_based) ? 'n' : 'nb'
     let flag .= a:wrapscan ? 'w' : 'W'
-    return searchpos(regex, flag)
+    let [vlnum, vcol] = searchpos(regex, flag)
+    if l:manual_cursor_moved && vlnum == 1
+        call cursor(0, l:fixed_vcol)
+    endif
+    return [vlnum, file_based ? vcol : l:fixed_vcol]
 endf
 
 func! s:FindNextFile(forward) abort
diff --git a/autoload/ctrlsf/win.vim b/autoload/ctrlsf/win.vim
index 1bfd140..84e2df3 100644
--- a/autoload/ctrlsf/win.vim
+++ b/autoload/ctrlsf/win.vim
@@ -43,7 +43,7 @@ func! ctrlsf#win#OpenMainWindow() abort
 
     " backup width/height of other windows
     " be sure doing this only when *opening new window*
-    call ctrlsf#win#BackupAllWinSize()
+    " call ctrlsf#win#BackupAllWinSize()
 
     let vmode = ctrlsf#CurrentMode()
 
@@ -91,10 +91,9 @@ func! ctrlsf#win#OpenMainWindow() abort
               \ }[g:ctrlsf_compact_position]
     endif
 
-
     " open window
     exec 'silent keepalt ' . openpos . winsize . 'split ' .
-                \ (bufnr('__CtrlSF__') != -1 ? '+b'.bufnr('__CtrlSF__') : '__CtrlSF__')
+                \ (bufnr(s:MAIN_BUF_NAME) != -1 ? '+b'.bufnr(s:MAIN_BUF_NAME) : s:MAIN_BUF_NAME)
 
     call s:InitMainWindow()
 
@@ -164,7 +163,7 @@ func! ctrlsf#win#CloseMainWindow() abort
       close
 
       " restore width/height of other windows
-      call ctrlsf#win#RestoreAllWinSize()
+      " call ctrlsf#win#RestoreAllWinSize()
 
       call ctrlsf#win#FocusCallerWindow()
     catch /^Vim\%((\a\+)\)\=:E444/
@@ -285,7 +284,7 @@ func! ctrlsf#win#FocusWindow(exp) abort
         let winnr = ctrlsf#win#FindWindow(a:exp)
     endif
 
-    if winnr < 0
+    if winnr <= 0
         return -1
     endif
 
@@ -305,12 +304,23 @@ func! ctrlsf#win#FocusMainWindow() abort
     return ctrlsf#win#FocusWindow(s:MAIN_BUF_NAME)
 endf
 
+func! ctrlsf#win#UpdateCallerWindow() abort
+    let s:caller_win = {
+        \ 'bufnr' : bufnr('%'),
+        \ 'winid' : win_getid(winnr()),
+        \ }
+endf
+
 " FindCallerWindow()
 "
 func! ctrlsf#win#FindCallerWindow() abort
     return s:caller_win.winid > 0 ? win_id2win(s:caller_win.winid) : -1
 endf
 
+func! ctrlsf#win#FindCallerBuf() abort
+    return s:caller_win.bufnr
+endf
+
 " FocusCallerWindow()
 "
 func! ctrlsf#win#FocusCallerWindow() abort
@@ -367,6 +377,7 @@ func! ctrlsf#win#FocusFirstMatch() abort
     " scroll up to top line
     1normal! ^
     call ctrlsf#NextMatch(1, 0)
+    call ctrlsf#win#FocusMainWindow()
 endf
 
 """""""""""""""""""""""""""""""""
diff --git a/plugin/ctrlsf.vim b/plugin/ctrlsf.vim
index 19fb9a2..e9e230f 100644
--- a/plugin/ctrlsf.vim
+++ b/plugin/ctrlsf.vim
@@ -10,6 +10,7 @@ if exists('g:ctrlsf_loaded') && !get(g:, 'ctrlsf_debug_mode', 0)
     finish
 endif
 let g:ctrlsf_loaded = 1
+let s:ctrlsf_last_cmd = ""
 " }}}
 
 " Utils {{{1
@@ -54,6 +55,7 @@ func! s:SearchCwordCmd(type, word_boundary, to_exec)
         let cmd .= " " . expand('<cword>')
     endif
     let cmd .= a:to_exec ? "\<CR>" : " "
+    let s:ctrlsf_last_cmd = cmd
     return cmd
 endf
 " }}}
@@ -65,6 +67,7 @@ func! s:SearchVwordCmd(type, to_exec)
     let keys = '":\<C-U>'. a:type .' " . g:CtrlSFGetVisualSelection()'
     let keys .= a:to_exec ? '."\<CR>"' : '." "'
     let cmd = ":\<C-U>call feedkeys(" . keys . ", 'n')\<CR>"
+    let s:ctrlsf_last_cmd = cmd
     return cmd
 endf
 " }}}
@@ -99,7 +102,7 @@ endif
 if !exists('g:ctrlsf_auto_close')
     let g:ctrlsf_auto_close = {
         \ "normal" : 1,
-        \ "compact": 0
+        \ "compact": 1
         \ }
 endif
 " }}}
@@ -327,6 +330,7 @@ com! -n=0                                         CtrlSFClearHL  call ctrlsf#Cle
 com! -n=0                                         CtrlSFToggle   call ctrlsf#Toggle()
 com! -n=0                                         CtrlSFStop     call ctrlsf#StopSearch()
 com! -n=0                                         CtrlSFFocus    call ctrlsf#Focus()
+com! -n=0                                         CtrlSFRepeat   execute "normal " . s:ctrlsf_last_cmd
 " }}}
 
 " Maps {{{1
