#!/bin/bash

check_dependencies() {
    local deps_app_list=(vim curl git ag ctags cscope astyle python3)
    for deps_app in "${deps_app_list[@]}"
    do
        if ! type -p "$deps_app" > /dev/null
        then
            printf "Make sure you have successfully installed $deps_app\n"
            exit
        fi
    done
}

config_vim() {
    # install npm to .local
    if ! type -p npm > /dev/null
    then
        curl -sL install-node.vercel.app/lts \
            | bash -s -- --prefix="$home_directory/.local"
    fi

    # use vim-plug to manage all vim plugins
    curl -fLo "$home_directory/.vim/autoload/plug.vim" --create-dirs \
        https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

    # use self-configuration for vim
    curl -fLo "$home_directory/.vimrc" "$raw_repo_url/dotfiles/.vimrc"

    # configuration for vim-coc
    curl -fLo "$home_directory/.vim/coc-settings.json" \
        "$raw_repo_url/dotfiles/.vim/coc-settings.json"

    rm -fr "$home_directory/.vim/plugged"
    mkdir -p "$home_directory/.vim/plugged"

    # install necessary vim plugins automatic
    echo "Installing vim plugins..."
    vim -c "silent PlugInstall" -c "qa"

    # patch file generated by diff -ruN old new > diff.patch file
    # cd "$plug_dir" && patch -s -p0 < gutentags.patch && rm gutentags.patch
    # patch file generated by `git diff > patch.diff`
    patch_list=(
       ctrlsf.vim.patch
       fern-preview.vim.patch
       minibufexpl.vim.patch
       vim-gutentags.patch
    )
    for patch in ${patch_list[@]}; do
       patch_filename="$raw_repo_url/dotfiles/.vim/patches/$patch"
       script_name="${patch%.*}"
       echo "Patching $patch_filename to $script_name"
       find "$home_directory/.vim/plugged" -maxdepth 1 -name "$script_name" \
           -execdir bash -c 'cd $0; curl $1 | git apply' {} $patch_filename \;
    done
}

config_dotfile() {
    curl -fLo "$home_directory/.tmux.conf" "$raw_repo_url/dotfiles/.tmux.conf"
    curl -fLo "$home_directory/.clang-format" \
        "$raw_repo_url/dotfiles/.clang-format"
    curl -fLo "$home_directory/.astylerc" "$raw_repo_url/dotfiles/.astylerc"
}

config_script() {
    # nc: if file exist, do not download
    # nv: do not print that much log
    # P: re-direct to given directory
    # wget -nc -nv -P $local_bin_path/ git.io/trans
    curl -fLo "$local_bin_path/trans" git.io/trans

    curl -fLo "$local_bin_path/code_backup.sh" \
        "$raw_repo_url/script/code_backup.sh"
    curl -fLo "$local_bin_path/string_replace.sh" \
        "$raw_repo_url/script/string_replace.sh"
    curl -fLo "$local_bin_path/python_replace.py" \
        "$raw_repo_url/script/python_replace.py"
    curl -fLo "$local_bin_path/code_format_clang.sh" \
        "$raw_repo_url/script/code_format_clang.sh"
    curl -fLo "$local_bin_path/tmux_panels.sh" \
        "$raw_repo_url/script/tmux_panels.sh"

    chmod 755 "$local_bin_path"/*.sh "$local_bin_path/trans"
}

config_mingw() {
    kernel_name=$(uname -s | tr '[:upper:]' '[:lower:]')
    os_name=$(uname -o | tr '[:upper:]' '[:lower:]')

    if [[ "$kernel_name" = *"mingw"* ]] || [[ "$os_name" = *"msys"* ]]
    then
        curl -fLo /usr/share/mintty/themes/base16-eighties-mod \
            "$raw_repo_url/demo/base16-eighties-mod"
        curl -fLo "$home_directory/.minttyrc" \
            "$raw_repo_url/dotfiles/.minttyrc"
        echo "/usr/local/bin"
    else
        echo "$home_directory/.local/bin"
    fi
}

# get current user's home directory
home_directory=$(eval echo "~${SUDO_USER}")
raw_repo_url="https://raw.githubusercontent.com/huhumt/vimrc_huhumt/master"
check_dependencies
config_dotfile
local_bin_path=$(config_mingw)
mkdir -p "$local_bin_path"
config_script
config_vim
echo 'Done, remember to add export PATH=${PATH}:$local_bin_path to .bashrc'
