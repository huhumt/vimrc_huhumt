#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from collections import OrderedDict
from datetime import datetime
import subprocess
import json
import sys
import os


FILE_PARENT_DIR = os.path.dirname(__file__)
JSON_FILENAME = os.path.join(os.path.dirname(FILE_PARENT_DIR),
                             "share/trans_shell/my_dict.json")
TMP_JSON_FILENAME = "/tmp/my_dict.json"
DISPLAY_COUNT_KEY = "display-from-local-dict-to-tmux-count"
DISPLAY_RUST_NEWS = "display-rust-news-to-tmux-flag"
TRANS_DICT_NAME = "trans-local-dict"


def update_dict(trans_string: str) -> int:
    try:
        with open(JSON_FILENAME, "r", encoding="utf-8") as f:
            trans_dict = json.load(f, object_pairs_hook=OrderedDict)
    except FileNotFoundError:
        trans_dict = OrderedDict()

    trans_word = trans_string.splitlines()[0].strip()
    if trans_word in trans_dict.keys():
        return 0

    trans_output = ""
    for line in trans_string.splitlines()[1:]:
        if line in ["Synonyms", "Examples"]:
            if trans_output.startswith("/"):
                trans_output = f"{trans_word} {trans_output.strip()}"
            else:
                trans_output = f"{trans_word}\n{trans_output.rstrip()}"
            trans_dict[trans_word] = trans_output
            with open(JSON_FILENAME, "w", encoding="utf-8") as f:
                json.dump(trans_dict, f, indent=4)
            return 0
        elif line:
            trans_output += f"{line.rstrip().replace('  ', ' ')}\n"
    return 0


def python_trans(args: list) -> str:
    trans_bin = os.path.join(FILE_PARENT_DIR, "trans_shell")
    args_list = ["bash", trans_bin] + args
    fd = subprocess.Popen(args_list, stdout=subprocess.PIPE)
    trans_output = fd.communicate()[0].decode("utf-8")
    print(trans_output)
    return trans_output


def add_colour(normal_str: str) -> str:
    # https://stackoverflow.com/a/28938235
    COLOUR_OFF = '\033[0m'
    COLOUR_CYAN = '\033[0;36m'
    return f"{COLOUR_CYAN}{normal_str}{COLOUR_OFF}"


def display_trans() -> str:
    try:
        with open(JSON_FILENAME, "r", encoding="utf-8") as f:
            trans_dict = json.load(f, object_pairs_hook=OrderedDict)
    except FileNotFoundError:
        return f"{JSON_FILENAME} not exist"

    try:
        with open(TMP_JSON_FILENAME, "r", encoding="utf-8") as f:
            tmp_trans_dict = json.load(f, object_pairs_hook=OrderedDict)
    except FileNotFoundError:
        tmp_trans_dict = {
            DISPLAY_COUNT_KEY: 0,
            DISPLAY_RUST_NEWS: False,
            TRANS_DICT_NAME: OrderedDict(),
        }
    tmp_trans_dict[TRANS_DICT_NAME] = trans_dict

    if tmp_trans_dict[DISPLAY_RUST_NEWS]:
        tmp_trans_dict[DISPLAY_RUST_NEWS] = False
        output = subprocess.Popen(
            "rustnews", stdout=subprocess.PIPE).communicate()[0].decode()
    else:
        display_cnt = tmp_trans_dict[DISPLAY_COUNT_KEY]
        if display_cnt >= len(tmp_trans_dict[TRANS_DICT_NAME].keys()) - 1:
            tmp_trans_dict[DISPLAY_COUNT_KEY] = 0
        else:
            tmp_trans_dict[DISPLAY_COUNT_KEY] = display_cnt + 1
        output = list(tmp_trans_dict[TRANS_DICT_NAME].values())[display_cnt]

        now_hour = datetime.now().hour
        # in working hour between 8:00 ~ 18:00
        # display news after learning 10 words
        # to avoid hitting the api request rate
        if ((now_hour > 8 and now_hour < 18)
                and (display_cnt > 0 and display_cnt % 10 == 0)):
            tmp_trans_dict[DISPLAY_RUST_NEWS] = True
    with open(TMP_JSON_FILENAME, "w", encoding="utf-8") as f:
        json.dump(tmp_trans_dict, f, indent=4)
    return output.rstrip()


if __name__ == "__main__":
    if sys.argv[1] == "--display-from-local-dict":
        print(f"\n{add_colour(display_trans())}")
        exit(0)

    if sys.argv[1] == "--from-vim":
        python_trans(sys.argv[2:])
    else:
        update_dict(python_trans(sys.argv[1:]))
